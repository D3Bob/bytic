{"version":3,"sources":["logo.svg","components/Main.module.css","components/Button.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","classMode","style","styleMode","onClick","click","val","Main","useState","Array","fill","cells","setCells","Math","floor","random","number","setNumber","unknown","setUnknown","blur","setBlur","winPanel","setWinPanel","reset","setCellValue","index","clone","i","getTwoSystem","str","toString","MyZero","length","getStrFromNumber","arr","join","useEffect","styles","win","display","winClose","winText","grid","filter","getBlur","info","x","parseInt","panel","cellLeft","cell","cellRight","result","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8577ad55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Main_grid__4Qkmo\",\"info\":\"Main_info__3vbgN\",\"x\":\"Main_x__1GiVw\",\"infoText\":\"Main_infoText__25gyK\",\"result\":\"Main_result__30LU4\",\"panel\":\"Main_panel__39Gm-\",\"cell\":\"Main_cell__kXqjX\",\"cellLeft\":\"Main_cellLeft__GpbVL\",\"cellRight\":\"Main_cellRight__2I_B6\",\"win\":\"Main_win__1tMs6\",\"winText\":\"Main_winText__2oQ4H\",\"winClose\":\"Main_winClose__3Hb7e\"};","import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction Button(props) {\r\n\r\n\r\n  return (\r\n        <button \r\n        className={props.classMode} \r\n        style={props.styleMode} \r\n        onClick={props.click}\r\n        >\r\n          {props.val}\r\n        </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from './Button';\r\n\r\nimport styles from './Main.module.css'\r\n\r\n\r\n\r\nfunction Main() {\r\n\r\n  var [cells, setCells] = useState(new Array(8).fill(0))\r\n  var [number, setNumber] = useState(Math.floor(Math.random() * 255) + 1)\r\n  var [unknown, setUnknown] = useState(false)\r\n  var [blur, setBlur] = useState(false)\r\n  var [winPanel,setWinPanel] = useState(false)\r\n  \r\n\r\n\r\n  const win = () => {\r\n    setBlur(true)\r\n    setWinPanel(true)\r\n  }\r\n\r\n  const getBlur = () => {\r\n    if(blur) return {filter: 'blur(10px)'}\r\n  }\r\n  const getWinPanel = () => {\r\n    if(winPanel) return {display: 'grid'}\r\n    else return {display: 'none'}\r\n  }\r\n\r\n  const reset = () => {\r\n    if(!winPanel) return\r\n    setBlur(false)\r\n    setWinPanel(false)\r\n    setUnknown(false)\r\n    setCells(new Array(8).fill(0))\r\n    setNumber(Math.floor(Math.random() * 255) + 1)\r\n  }\r\n\r\n  const setCellValue = (index) => {\r\n    if(winPanel) reset()\r\n\r\n    let clone = new Array(8)\r\n    for (let i = 0; i < 8; ++i) {\r\n      if (i === index) cells[i] ? clone[i] = 0 : clone[i] = 1\r\n      else clone[i] = cells[i]\r\n    }\r\n    setCells(clone)\r\n  }\r\n\r\n  const getTwoSystem = (number) => {\r\n    let str = number.toString(2), MyZero = ''\r\n    for (let i = 0; i < (8 - str.length); ++i) MyZero += '0'\r\n    return MyZero + str\r\n  }\r\n  const getUserValue = (num) => {\r\n    return parseInt(num.join(''), 2).toString()\r\n  }\r\n  const getStrFromNumber = (arr) => arr.join('')\r\n\r\n  const check = () => {\r\n    let val = getStrFromNumber(cells), str = getTwoSystem(number)\r\n    if (val === str) win()\r\n  }\r\n  const getDifference = () => {\r\n    let val = getStrFromNumber(cells), str = getTwoSystem(number)\r\n    if (val > str) return 'Перебор'\r\n    else return 'Недобор'\r\n  }\r\n  const unknownPanel = () => {\r\n    if (!unknown) return 'Показать искомое число'\r\n    else return number\r\n  }\r\n\r\n  useEffect(check, [cells])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div className={styles.win} style={getWinPanel()}>\r\n        <button className={styles.winClose} onClick={reset}>закрыть</button>\r\n        <code className={styles.winText}>Вы угадали число</code>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n\r\n      <div className={styles.grid}  style={getBlur()}>\r\n\r\n        <div className={styles.info}>\r\n          <code className={styles.x}>Ваше число: {getUserValue(cells)}</code>\r\n          <code className={styles.x}>{getDifference()}</code>\r\n        </div>\r\n\r\n        <div className={styles.panel}>\r\n          <Button classMode={styles.cellLeft} val={cells[0]} click={() => { setCellValue(0) }} ></Button>\r\n          <Button classMode={styles.cell} val={cells[1]} click={() => { setCellValue(1) }}     ></Button>\r\n          <Button classMode={styles.cell} val={cells[2]} click={() => { setCellValue(2) }}     ></Button>\r\n          <Button classMode={styles.cell} val={cells[3]} click={() => { setCellValue(3) }}     ></Button>\r\n          <Button classMode={styles.cell} val={cells[4]} click={() => { setCellValue(4) }}     ></Button>\r\n          <Button classMode={styles.cell} val={cells[5]} click={() => { setCellValue(5) }}     ></Button>\r\n          <Button classMode={styles.cell} val={cells[6]} click={() => { setCellValue(6) }}     ></Button>\r\n          <Button classMode={styles.cellRight} val={cells[7]} click={() => { setCellValue(7) }}></Button>\r\n        </div>\r\n\r\n        <button className={styles.result} onClick={() => setUnknown(!unknown)} >{unknownPanel()}</button>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n   \n    <div >\n        <Route path='/' component={Main}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>    <App /></BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}